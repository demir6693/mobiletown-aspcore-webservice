// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace webshopApi.Migrations
{
    [DbContext(typeof(webContextDb))]
    [Migration("20190223112924_productAll")]
    partial class productAll
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Msrp");

                    b.Property<int>("brandId");

                    b.Property<int>("descriptionId");

                    b.Property<int>("groupId");

                    b.Property<string>("picture")
                        .HasMaxLength(65535);

                    b.Property<int>("pictureId");

                    b.Property<decimal>("price");

                    b.HasKey("Id");

                    b.HasIndex("brandId");

                    b.HasIndex("groupId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description")
                        .HasMaxLength(255);

                    b.Property<int?>("descriptionId");

                    b.Property<string>("descriptionName")
                        .HasMaxLength(255);

                    b.Property<int>("productId");

                    b.HasKey("Id");

                    b.HasIndex("descriptionId");

                    b.HasIndex("productId");

                    b.ToTable("ProductDescriptions");
                });

            modelBuilder.Entity("ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("idProd");

                    b.Property<int?>("pictureId");

                    b.Property<string>("picutre")
                        .HasMaxLength(65535);

                    b.HasKey("Id");

                    b.HasIndex("idProd");

                    b.HasIndex("pictureId");

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<int>("IdUserInfo");

                    b.Property<string>("Password")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("IdUserInfo");

                    b.ToTable("User");
                });

            modelBuilder.Entity("UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdUser");

                    b.Property<string>("adresa")
                        .HasMaxLength(255);

                    b.Property<string>("brTelefona")
                        .HasMaxLength(255);

                    b.Property<string>("fName")
                        .HasMaxLength(255);

                    b.Property<string>("grad")
                        .HasMaxLength(255);

                    b.Property<string>("lName")
                        .HasMaxLength(255);

                    b.Property<int>("postalCode");

                    b.Property<string>("userName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("UsersInfo");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("brandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group", "Group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductDescription", b =>
                {
                    b.HasOne("Product")
                        .WithMany("ProductDescription")
                        .HasForeignKey("descriptionId");

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductPicture", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("idProd")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("pictureId");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("UsersInfo", "UsersInfo")
                        .WithMany()
                        .HasForeignKey("IdUserInfo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UsersInfo", b =>
                {
                    b.HasOne("User", "user")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
