// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace webshopApi.Migrations
{
    [DbContext(typeof(webContextDb))]
    [Migration("20190325191206_receiptTable")]
    partial class receiptTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("BrandByGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("brandId");

                    b.Property<int>("groupId");

                    b.HasKey("Id");

                    b.HasIndex("brandId");

                    b.HasIndex("groupId");

                    b.ToTable("BrandByGroups");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("dateCreated");

                    b.Property<int>("userId");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CartItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("cartId");

                    b.Property<int>("kolicina");

                    b.Property<int>("productId");

                    b.HasKey("Id");

                    b.HasIndex("cartId");

                    b.HasIndex("productId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("cartId");

                    b.Property<DateTime>("dateOrder");

                    b.Property<int>("userInfoId");

                    b.HasKey("Id");

                    b.HasIndex("cartId");

                    b.HasIndex("userInfoId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("orderId");

                    b.Property<int>("productId");

                    b.HasKey("Id");

                    b.HasIndex("orderId");

                    b.HasIndex("productId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Msrp");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int>("brandId");

                    b.Property<int>("groupId");

                    b.Property<int>("pictureId");

                    b.Property<decimal>("price");

                    b.HasKey("Id");

                    b.HasIndex("brandId");

                    b.HasIndex("groupId");

                    b.HasIndex("pictureId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description")
                        .HasMaxLength(255);

                    b.Property<string>("descriptionName")
                        .HasMaxLength(255);

                    b.Property<int>("productId");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.ToTable("ProductDescriptions");
                });

            modelBuilder.Entity("ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("idProd");

                    b.Property<string>("picture");

                    b.HasKey("Id");

                    b.HasIndex("idProd");

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("userInfoId");

                    b.HasKey("Id");

                    b.HasIndex("userInfoId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("ReceiptItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("productId");

                    b.Property<int>("receiptId");

                    b.HasKey("Id");

                    b.HasIndex("productId");

                    b.HasIndex("receiptId");

                    b.ToTable("ReceiptItems");
                });

            modelBuilder.Entity("TitlePictureProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("picture");

                    b.HasKey("Id");

                    b.ToTable("TitlePictureProducts");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("UsersInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdUser");

                    b.Property<string>("adresa")
                        .HasMaxLength(255);

                    b.Property<string>("brTelefona")
                        .HasMaxLength(255);

                    b.Property<string>("fName")
                        .HasMaxLength(255);

                    b.Property<string>("grad")
                        .HasMaxLength(255);

                    b.Property<string>("lName")
                        .HasMaxLength(255);

                    b.Property<int>("postalCode");

                    b.Property<string>("userName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("UsersInfo");
                });

            modelBuilder.Entity("BrandByGroup", b =>
                {
                    b.HasOne("Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("brandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group", "Group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CartItems", b =>
                {
                    b.HasOne("Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("cartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("cartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UsersInfo", "UsersInfo")
                        .WithMany()
                        .HasForeignKey("userInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OrderItems", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("brandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Group", "Group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TitlePictureProduct", "TitlePictureProduct")
                        .WithMany()
                        .HasForeignKey("pictureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductDescription", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductPicture", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("idProd")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Receipt", b =>
                {
                    b.HasOne("UsersInfo", "UsersInfo")
                        .WithMany()
                        .HasForeignKey("userInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReceiptItems", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Receipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("receiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UsersInfo", b =>
                {
                    b.HasOne("User", "user")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
